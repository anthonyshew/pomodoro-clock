{"version":3,"sources":["mediums/tomato.png","mediums/restStart.wav","mediums/restEnd.wav","reducers/makeReducer.js","reducers/renderReducer.js","reducers/index.js","actions/types.js","store.js","actions/makeActions.js","components/Timemaker.js","actions/renderActions.js","components/Timer.js","components/Progressbar.js","components/Tomato.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","work","rest","render","isWorking","isResting","combineReducers","makeClock","state","arguments","length","undefined","action","type","Object","objectSpread","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","workSet","dispatch","restSet","Timemaker","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","workCounter","restCounter","timeChange","bind","assertThisInitialized","e","target","className","setState","console","log","phase","visibility","react_default","a","createElement","onClick","id","Component","connect","reRender","Timer","time","interval","clock","isCounting","minutes","seconds","timer","parseInt","document","querySelector","innerHTML","status","style","display","querySelectorAll","forEach","elem","clearInterval","resetTimer","setInterval","Progressbar","width","progression","widthIncrement","nextProps","Tomato","classList","add","Audio","Upbeep","play","remove","Downbeep","src","tomato","alt","App","es","components_Tomato","components_Timemaker","components_Timer","components_Progressbar","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7406fee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tomato.736d7de1.png\";","module.exports = __webpack_public_path__ + \"static/media/restStart.25763938.wav\";","module.exports = __webpack_public_path__ + \"static/media/restEnd.00970d07.wav\";","import { WORK_UPDATE, REST_UPDATE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    work: 5,\r\n    rest: 4\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case WORK_UPDATE:\r\n        return {\r\n            ...state,\r\n            work: action.payload\r\n        };\r\n        case REST_UPDATE:\r\n        return {\r\n            ...state,\r\n            rest: action.payload\r\n        };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { RENDER_UPDATE } from '../actions/types';\r\n\r\nconst initialState = {\r\n    render: 'visible',\r\n    isWorking: false,\r\n    isResting: false\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case RENDER_UPDATE:\r\n        return {\r\n            ...state,\r\n            render: action.payload,\r\n            isWorking: action.isWorking,\r\n            isResting: action.isResting\r\n        };\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport makeReducer from './makeReducer';\r\nimport renderReducer from './renderReducer';\r\n\r\nexport default combineReducers({\r\n    makeClock: makeReducer,\r\n    render: renderReducer\r\n});","export const WORK_UPDATE = 'WORK_UPDATE';\r\nexport const REST_UPDATE = 'REST_UPDATE';\r\nexport const RENDER_UPDATE = 'RENDER_UPDATE';","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n    );\r\n\r\nexport default store;","import { WORK_UPDATE, REST_UPDATE } from './types';\r\nimport store  from '../store';\r\n\r\nexport const workSet = (work) => {\r\n    store.dispatch({\r\n        type: WORK_UPDATE,\r\n        payload: work\r\n    })\r\n}\r\n\r\nexport const restSet = (rest) => {\r\n    store.dispatch({\r\n        type: REST_UPDATE,\r\n        payload: rest\r\n    })\r\n}","import React, { Component } from 'react';\r\nimport { PropTypes } from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { workSet, restSet } from '../actions/makeActions.js'\r\n\r\nclass Timemaker extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      workCounter: 5,\r\n      restCounter: 4,\r\n    }\r\n\r\n    this.timeChange = this.timeChange.bind(this);\r\n  }\r\n\r\n  timeChange(e) {\r\n    if (e.target.className === \"fas fa-angle-down decrementer-Work\") {\r\n      if (this.state.workCounter >= 2) {\r\n        let work = this.state.workCounter - 1;\r\n        this.setState({\r\n          workCounter: this.state.workCounter - 1\r\n        });\r\n        workSet(work);\r\n      } else {\r\n        console.log(\"We can't do negative time!\");\r\n      }\r\n    } else if (e.target.className === \"fas fa-angle-up incrementer-Work\") {\r\n      if (this.state.workCounter <= 59) {\r\n        let work = this.state.workCounter + 1;\r\n        this.setState({\r\n          workCounter: this.state.workCounter + 1\r\n        });\r\n        workSet(work);\r\n      } else {\r\n        console.log(\"More than hour?! You don't even need a Pomodoro Clock!\");\r\n      }\r\n    } else if (e.target.className === \"fas fa-angle-down decrementer-Rest\") {\r\n        if (this.state.restCounter >= 2) {\r\n          let rest = this.state.restCounter - 1;\r\n          this.setState({\r\n            restCounter: this.state.restCounter - 1\r\n          });\r\n          restSet(rest);\r\n        } else {\r\n          console.log(\"We can't do negative time!\");\r\n        }\r\n      } else if (e.target.className === \"fas fa-angle-up incrementer-Rest\") {\r\n        if (this.state.restCounter <= 59) {\r\n          let rest = this.state.restCounter + 1;\r\n          this.setState({\r\n            restCounter: this.state.restCounter + 1\r\n          });\r\n          restSet(rest);\r\n        } else {\r\n          console.log(\"More than hour?! You don't even need a Pomodoro Clock!\");\r\n        }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if(this.props.phase === 'Work' && this.props.visibility === 'visible') {\r\n    return (\r\n      <div className={\"timemaker-\"+this.props.phase}>\r\n        <h2 className=\"phase-maker\">{this.props.phase}</h2>\r\n        <div className=\"timer-setter\">\r\n          <i className={\"fas fa-angle-down decrementer-\"+this.props.phase} onClick={this.timeChange}></i>\r\n          <span id=\"l\" className=\"time-adjuster\">{this.state.workCounter}</span>\r\n          <i className={\"fas fa-angle-up incrementer-\"+this.props.phase} onClick={this.timeChange}></i>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else if(this.props.phase === 'Work' && this.props.visibility === 'invisible') {\r\n    return (\r\n      <div className={\"timemaker-\"+this.props.phase}>\r\n        <h2 className=\"phase-maker\">{this.props.phase}</h2>\r\n        <div className=\"timer-setter\">\r\n          <span id=\"l\" className=\"time-adjuster\">{this.state.workCounter}</span>\r\n        </div>\r\n      </div>\r\n    )\r\n    } else if (this.props.phase === 'Rest' && this.props.visibility === 'visible') {\r\n    return (\r\n      <div className={\"timemaker-\"+this.props.phase}>\r\n        <h2 className=\"phase-maker\">{this.props.phase}</h2>\r\n        <div className=\"timer-setter\">\r\n          <i className={\"fas fa-angle-down decrementer-\"+this.props.phase} onClick={this.timeChange}></i>\r\n          <span id=\"l\" className=\"time-adjuster\">{this.state.restCounter}</span>\r\n          <i className={\"fas fa-angle-up incrementer-\"+this.props.phase} onClick={this.timeChange}></i>\r\n        </div>\r\n      </div>\r\n    )\r\n     } else if (this.props.phase === 'Rest' && this.props.visibility === 'invisible') {\r\n  return (\r\n    <div className={\"timemaker-\"+this.props.phase}>\r\n      <h2 className=\"phase-maker\">{this.props.phase}</h2>\r\n      <div className=\"timer-setter\">\r\n        <span className=\"time-adjuster\">{this.state.restCounter}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n}\r\n};\r\n\r\nTimemaker.propTypes = {\r\n  workSet: PropTypes.func.isRequired,\r\n  restSet: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  visibility: state.render.render,\r\n  rest: state.makeClock.rest,\r\n});\r\n\r\nexport default connect(mapStateToProps, { workSet, restSet }) (Timemaker);","import { RENDER_UPDATE } from './types';\r\nimport store  from '../store';\r\n\r\nexport const reRender = (visibility, isWorking, isResting) => {\r\n\r\n    store.dispatch({\r\n        type: RENDER_UPDATE,\r\n        payload: visibility,\r\n        isWorking: isWorking,\r\n        isResting: isResting\r\n    })\r\n}","import React, { Component } from 'react';\r\nimport { PropTypes } from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { reRender } from '../actions/renderActions.js'\r\n\r\n\r\nclass Timer extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            work: this.props.work * 60,\r\n            rest: this.props.rest * 60,\r\n            time: (this.props.work + this.props.rest) * 60,\r\n            interval: '',\r\n            clock: () => {\r\n                if(this.state.isCounting === true) {\r\n                    let timer = this.state.time, minutes, seconds;\r\n                    minutes = parseInt(timer / 60, 10);\r\n                    seconds = parseInt(timer % 60, 10);\r\n    \r\n                    minutes = minutes < 10 ? minutes : minutes;\r\n                    seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n                    this.setState({\r\n                        time: this.state.time - 1,\r\n                    })\r\n    \r\n                    document.querySelector(\"#display-total\").innerHTML = minutes + \":\" + seconds;\r\n            \r\n                    if (this.state.time < this.props.rest * 60) {\r\n                        reRender('invisible', false, true)\r\n                        this.setState({\r\n                            isWorking: false,\r\n                            isResting: true,\r\n                            status: 'You are resting.'\r\n                        }) };\r\n                    \r\n                        if (this.state.time < 0) {\r\n                            document.querySelector(\".start-clock\").style.display = 'inline-block';\r\n                            document.querySelectorAll(\".btn-clock\").forEach(elem => {elem.style.display = 'none'});\r\n                            document.querySelector(\"#display-total\").innerHTML = this.props.work + this.props.rest + \" total minutes\";\r\n                                clearInterval(this.state.interval);\r\n                                reRender('visible', false, false);\r\n                            this.setState({\r\n                                time: (this.props.work + this.props.rest) * 60,\r\n                                isCounting: false,\r\n                                status: 'Waiting...'\r\n                            });\r\n                        };\r\n                }\r\n            },\r\n            isCounting: false,\r\n            isWorking: false,\r\n            isResting: false,\r\n            status: 'Waiting...'\r\n        }\r\n        this.Timer = this.Timer.bind(this);\r\n        this.resetTimer = this.resetTimer.bind(this);\r\n\r\n    }\r\n\r\n    Timer() {\r\n        if(document.querySelector(\"#display-total\").innerHTML === this.props.work + this.props.rest + \" total minutes\") {\r\n            this.setState({\r\n                time: (this.props.work + this.props.rest) * 60,\r\n                interval: setInterval(this.state.clock, 1000),\r\n                isCounting: true,\r\n                isWorking: true,\r\n                isResting: false,\r\n                status: 'You are working!'\r\n            });\r\n            document.querySelector(\".start-clock\").style.display = 'none';\r\n            document.querySelectorAll(\".btn-clock\").forEach(elem => {elem.style.display = 'inline-block'});\r\n            reRender('invisible', true, false);\r\n        }\r\n    };\r\n\r\n    resetTimer() {\r\n        document.querySelector(\".start-clock\").style.display = 'inline-block';\r\n        document.querySelectorAll(\".btn-clock\").forEach(elem => {elem.style.display = 'none'});\r\n        document.querySelector(\"#display-total\").innerHTML = this.props.work + this.props.rest + \" total minutes\";\r\n        clearInterval(this.state.interval);\r\n        reRender('visible', false, false);\r\n        this.setState({\r\n            time: (this.props.work + this.props.rest) * 60,\r\n            isCounting: false,\r\n            isWorking: false,\r\n            isResting: false,\r\n            status: 'Waiting...'\r\n        });\r\n    };\r\n\r\n  render() {\r\n    return(\r\n        <div className=\"timer\">\r\n            <div className=\"status\">{this.state.status}</div>\r\n            <button className=\"start-clock\" onClick={this.Timer}>Start</button>\r\n            <button className=\"btn-clock\" onClick={this.resetTimer}>Reset</button>\r\n            <div id=\"display-total\">{this.props.work + this.props.rest + \" total minutes\"}</div>\r\n        </div>\r\n    )\r\n  }\r\n};\r\n\r\nTimer.propTypes = {\r\n  work: PropTypes.number.isRequired,\r\n  rest: PropTypes.number.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  work: state.makeClock.work,\r\n  rest: state.makeClock.rest,\r\n});\r\n\r\nexport default connect (mapStateToProps, { reRender })(Timer);","import React, { Component } from 'react';\r\nimport { PropTypes } from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Progressbar extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state ={\r\n      work: this.props.work,\r\n      rest: this.props.rest,\r\n      time: (this.props.work + this.props.rest) * 60,\r\n      width: 1,\r\n      interval: '',\r\n      progression: () => {\r\n        // eslint-disable-next-line\r\n        let timer = this.state.time, minutes, seconds;\r\n        let elem = document.querySelector(\".progress-bar\");\r\n        let width = this.state.width;\r\n        let widthIncrement = 100 / ((this.props.work + this.props.rest) * 60);\r\n\r\n        minutes = parseInt(timer / 60, 10)\r\n        seconds = parseInt(timer % 60, 10);\r\n    \r\n        minutes = minutes < 10 ? minutes : minutes;\r\n        seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n        elem.style.width = width + '%';\r\n\r\n        this.setState({\r\n          time: this.state.time - 1,\r\n          width: width + widthIncrement\r\n        });\r\n                    \r\n        if (this.state.time < 0) {\r\n          clearInterval(this.state.interval);\r\n        }\r\n      },\r\n    }\r\n\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if(nextProps.render === \"invisible\"){\r\n      this.setState({\r\n        interval: setInterval(this.state.progression, 1000)\r\n      })\r\n    } else {\r\n      this.setState({\r\n        interval: clearInterval(this.state.interval),\r\n        width: 1\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n        <div className=\"progress\">\r\n            <div className=\"progress-bar\"></div>\r\n        </div>\r\n    )\r\n  }\r\n};\r\n\r\nProgressbar.propTypes = {\r\n  work: PropTypes.number.isRequired,\r\n  rest: PropTypes.number.isRequired,\r\n  render: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  work: state.makeClock.work,\r\n  rest: state.makeClock.rest,\r\n  render: state.render.render\r\n});\r\n\r\nexport default connect (mapStateToProps, null)(Progressbar);","import React, { Component } from 'react';\r\nimport { PropTypes } from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport tomato from '../mediums/tomato.png';\r\n\r\nimport Upbeep from '../mediums/restStart.wav';\r\nimport Downbeep from '../mediums/restEnd.wav';\r\n\r\nclass Tomato extends Component {\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if(nextProps.isResting === true){\r\n      document.querySelector(\".tomato\").classList.add(\"jello-horizontal\");\r\n      let sound = new Audio(Upbeep);\r\n      sound.play();\r\n\r\n    } else if (nextProps.isResting === false) {\r\n      document.querySelector(\".tomato\").classList.remove(\"jello-horizontal\");\r\n      let sound = new Audio(Downbeep);\r\n      sound.play();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <img className=\"tomato\" src={tomato} alt=\"Tomato!\" />\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nTomato.propTypes = {\r\n  isResting: PropTypes.bool.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  isResting: state.render.isResting\r\n});\r\n\r\nexport default connect (mapStateToProps, null)(Tomato);","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nimport Timemaker from './components/Timemaker.js';\r\nimport Timer from './components/Timer.js';\r\nimport Progressbar from './components/Progressbar.js';\r\n\r\nimport Tomato from './components/Tomato.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n      <div className=\"App\">\r\n        <div className=\"vp-center\">\r\n        < Tomato />\r\n          <h1>A Pomodoro Clock</h1>\r\n          <h2>WORK HARD, <span className=\"little-text\"> but rest when you need to.</span></h2>\r\n          < Timemaker phase=\"Work\" />\r\n          < Timemaker phase=\"Rest\" />\r\n          < Timer />\r\n          </div>\r\n          < Progressbar />\r\n      </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}